
AWSServiceRoleForAPIGateway:
  Type: "AWS::IAM::ServiceLinkedRole"
  Properties:
    AWSServiceName: "ops.apigateway.amazonaws.com"

ElkRole:
  Type: 'AWS::IAM::ServiceLinkedRole'
  Properties:
    AWSServiceName: "es.amazonaws.com"
    Description: 'Role for ES to access resources in VPC'


  LoginListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: authenticate-cognito
          Order: 1
          AuthenticateCognitoConfig:
            UserPoolArn: !GetAtt UserPool.Arn
            UserPoolClientId: !Ref AuthUserPoolClient
            UserPoolDomain:  !Ref UserPoolDoman
        - Type: fixed-response
          Order: 2
          FixedResponseConfig:
            ContentType: "application/json"
            MessageBody: '{"login" : "success"}'
            StatusCode: "200"
      Conditions:
        - Field: host-header
          Values:
            - !Sub "login.${PrivateHostedZoneName}"
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  LoadBalancerDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Sub '${PrivateHostedZoneId}'
      Comment: "DNS name for Application Load Balancer"
      Name: !Sub 'login.${PrivateHostedZoneName}.'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"